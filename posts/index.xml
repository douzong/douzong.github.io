<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yu Dong De Blog</title>
    <link>https://douzong.github.io/posts/</link>
    <description>Recent content in Posts on Yu Dong De Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Dec 2022 17:39:35 +0800</lastBuildDate><atom:link href="https://douzong.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Sql</title>
      <link>https://douzong.github.io/posts/go-sql/</link>
      <pubDate>Thu, 01 Dec 2022 17:39:35 +0800</pubDate>
      
      <guid>https://douzong.github.io/posts/go-sql/</guid>
      <description>Go sql连接池原理源码解析通过一个实际的查询语句来了解一下database/sql包的连接池实现原理
一、驱动注册
在初始化DB的地方导入mysql驱动
import _ &amp;#34;github.com/go-sql-driver/mysql&amp;#34; 导入此包的目的是执行github.com/go-sql-driver/mysql/driver.go中的init函数
func init() { // 调用database/sql/sql.go中的Register函数注册mysql驱动 sql.Register(&amp;#34;mysql&amp;#34;, &amp;amp;MySQLDriver{}) } 二、初始化DB
open返回一个DB结构体（并发安全，就是这个DB管理了一个连接池），并启动一个goroutine监听openerCh通道，当有请求时获取新的连接，此时并没有创建连接
func Open(driverName, dataSourceName string) (*DB, error) { driversMu.RLock() // 获取刚刚注册的数据库驱动 driveri, ok := drivers[driverName] driversMu.RUnlock() if !ok { return nil, fmt.Errorf(&amp;#34;sql: unknown driver %q (forgotten import?)&amp;#34;, driverName) } if driverCtx, ok := driveri.(driver.DriverContext); ok { connector, err := driverCtx.OpenConnector(dataSourceName) if err != nil { return nil, err } // 返回一个*DB return OpenDB(connector), nil } return OpenDB(dsnConnector{dsn: dataSourceName, driver: driveri}), nil } func OpenDB(c driver.</description>
    </item>
    
  </channel>
</rss>
